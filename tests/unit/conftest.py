import json
from typing import Dict, List

import pytest
from pydantic import BaseModel, Field

from clio.config import ClioConfig
from clio.schemas.facet import (
    FacetConfig,
)


@pytest.fixture(scope="session")
def facets_config() -> List[FacetConfig]:
    return [
        FacetConfig(
            name="short_summary",
            description="Short summary of the document",
            required=True,
            type="default_free_text",
        ),
        FacetConfig(
            name="message_count",
            description="Amount of messages",
            type="default_numerical",
        ),
        FacetConfig(
            name="language",
            description="Language of the document",
            type="default_categorical",
        ),
        FacetConfig(
            name="date",
            description="Date of the document",
            required=False,
            type="default_date",
        ),
        # FIXME: Add a facet with type "default_datetime". 
        # Can't be done initially due to to default values generated by pydantic-ai TestModel
        # producing "a" and not valid datetime strings.
    ]


@pytest.fixture
def mock_Facets() -> BaseModel:
    class MockFacets(BaseModel):
        short_summary: str = Field(..., description="Short summary of the document")
        message_count: int = Field(..., description="Amount of messages")

    return MockFacets


@pytest.fixture(scope="session")
def conversations() -> List[Dict]:
    with open(
        "tests/data/hyperdrive_solutions_inc_conversations.json",
        mode="r",
        encoding="utf-8",
    ) as f:
        data = json.load(f)
    return data


@pytest.fixture(scope="session")
def mock_ClioConfig(facets_config) -> ClioConfig:
    return ClioConfig(
        facets=facets_config,
        facets_extraction_agent={
            "model_name": "test",
            "system_prompt_path": "tests/configs/prompts/mock_system_prompt.txt",
        },
    )
